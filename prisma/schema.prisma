// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// for local testing use this
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   // relationMode = "prisma"
// }

model User {
  id               String            @id @default(cuid())
  name             String
  username         String
  salt             String
  passwordHash     String
  role             Role[]
  tokens           Token[]
  blogs            Blog[]
  comments         Comment[]
  blogReactions    BlogReaction[]
  commentReactions CommentReaction[]
}

model Role {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Blog {
  id           String         @id @default(cuid())
  title        String
  titleLowered String
  content      String
  authorId     String
  author       User           @relation(fields: [authorId], references: [id])
  comments     Comment[]
  reactions    BlogReaction[]
  images       BlogImage[]
  coverImageid String         @default(cuid())
  isTemp       Boolean        @default(false)
}

model BlogImage {
  id        String  @id @default(cuid())
  blogId    String
  fulfilled Boolean
  blog      Blog    @relation(fields: [blogId], references: [id])
}

model Comment {
  id              String            @id @default(cuid())
  content         String
  blogId          String
  authorId        String
  author          User              @relation(fields: [authorId], references: [id])
  blog            Blog              @relation(fields: [blogId], references: [id])
  commentReaction CommentReaction[]
}

model BlogReaction {
  id     String  @id @default(cuid())
  type   Boolean
  blogId String
  blog   Blog    @relation(fields: [blogId], references: [id])
  userId String
  user   User    @relation(fields: [userId], references: [id])
}

model CommentReaction {
  id        String  @id @default(cuid())
  type      Boolean
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Token {
  id     String @id @default(cuid())
  userId String
  value  String
  user   User   @relation(fields: [userId], references: [id])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
